// api/check-programmes.js
export default async function handler(req, res) {
    // Enable CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST');
    
    // Only use built-in modules or Vercel-compatible packages
    const { createClient } = await import('@supabase/supabase-js');
    
    const SUPABASE_URL = process.env.SUPABASE_URL;
    const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
    
    if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY || !TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
        return res.status(500).json({ error: 'Missing environment variables' });
    }
    
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
    
    async function sendTelegramMessage(message) {
        try {
            const response = await fetch(
                `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
                {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: TELEGRAM_CHAT_ID,
                        text: message,
                        parse_mode: 'HTML'
                    })
                }
            );
            return await response.json();
        } catch (error) {
            console.error('Error sending Telegram message:', error);
            return null;
        }
    }
    
    // Get current date in Singapore timezone
    const now = new Date();
    const singaporeTime = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Singapore"}));
    const today = singaporeTime.toISOString().split('T')[0];
    const currentHour = singaporeTime.getHours();
    
    // Calculate date 2 days ago
    const twoDaysAgo = new Date(singaporeTime);
    twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
    const twoDaysAgoStr = twoDaysAgo.toISOString().split('T')[0];
    
    console.log(`Checking programmes for ${today} at ${currentHour}:00 SGT`);
    
    // For testing, allow manual trigger with ?force=true
    const forceRun = req.query.force === 'true';
    
    if (currentHour !== 17 && !forceRun) {
        return res.status(200).json({ 
            message: `Not 5 PM yet. Current time: ${currentHour}:00 SGT`,
            note: 'Add ?force=true to bypass time check for testing'
        });
    }
    
    try {
        const results = [];
        
        // 1. First-time notifications
        const { data: programmesEndingToday, error: error1 } = await supabase
            .from('programmes')
            .select('*')
            .eq('end_date', today)
            .eq('notification_sent', false);
        
        if (error1) throw error1;
        
        if (programmesEndingToday && programmesEndingToday.length > 0) {
            for (const programme of programmesEndingToday) {
                const message = `üîî <b>Programme Evaluation Reminder</b>\n\n` +
                              `Programme: <b>${programme.course_title}</b>\n` +
                              `Trainer: ${programme.trainer_name}\n` +
                              `Period: ${new Date(programme.start_date).toLocaleDateString()} - ${new Date(programme.end_date).toLocaleDateString()}\n\n` +
                              `üìä This programme ended today. Please check the evaluation results and update the KPI status in your tracker.\n\n` +
                              `üëâ Mark as ‚úÖ (KPI Met) or ‚ùå (KPI Not Met)`;
                
                const result = await sendTelegramMessage(message);
                
                if (result && result.ok) {
                    await supabase
                        .from('programmes')
                        .update({ notification_sent: true })
                        .eq('id', programme.id);
                    
                    results.push({
                        programme: programme.course_title,
                        type: 'first_reminder',
                        status: 'sent'
                    });
                }
            }
        }
        
        // 2. Follow-up notifications
        const { data: pendingProgrammes, error: error2 } = await supabase
            .from('programmes')
            .select('*')
            .eq('end_date', twoDaysAgoStr)
            .is('kpi_met', null)
            .eq('notification_sent', true)
            .or('follow_up_sent.is.null,follow_up_sent.eq.false');
        
        if (error2) throw error2;
        
        if (pendingProgrammes && pendingProgrammes.length > 0) {
            for (const programme of pendingProgrammes) {
                const message = `‚ö†Ô∏è <b>URGENT: KPI Update Required</b>\n\n` +
                              `Programme: <b>${programme.course_title}</b>\n` +
                              `Trainer: ${programme.trainer_name}\n` +
                              `Ended: ${new Date(programme.end_date).toLocaleDateString()} (2 days ago)\n\n` +
                              `üö® This programme's KPI status is still pending. Please update it immediately in your tracker.\n\n` +
                              `üëâ Mark as ‚úÖ (KPI Met) or ‚ùå (KPI Not Met)\n\n` +
                              `<i>This is your second reminder.</i>`;
                
                const result = await sendTelegramMessage(message);
                
                if (result && result.ok) {
                    await supabase
                        .from('programmes')
                        .update({ follow_up_sent: true })
                        .eq('id', programme.id);
                    
                    results.push({
                        programme: programme.course_title,
                        type: 'follow_up_reminder',
                        status: 'sent'
                    });
                }
            }
        }
        
        return res.status(200).json({
            success: true,
            message: `Processed ${results.length} notifications`,
            currentTime: `${currentHour}:00 SGT`,
            results,
            details: {
                first_reminders: results.filter(r => r.type === 'first_reminder').length,
                follow_up_reminders: results.filter(r => r.type === 'follow_up_reminder').length
            }
        });
        
    } catch (error) {
        console.error('Error:', error);
        return res.status(500).json({ 
            error: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
}